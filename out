:compileJava/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/ClassPath.java:23: 警告: [rawtypes] 找到原始类型: Class
      Class c = cl.loadClass(className);
      ^
  缺少泛型类Class<T>的类型参数
  其中, T是类型变量:
    T扩展已在类 Class中声明的Object
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/ClassPath.java:24: 警告: [rawtypes] 找到原始类型: Class
      Class p = c.getSuperclass();
      ^
  缺少泛型类Class<T>的类型参数
  其中, T是类型变量:
    T扩展已在类 Class中声明的Object
错误: 发现警告, 但指定了 -Werror
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/gumtree/ActionGenerator.java:30: 警告: [rawtypes] 找到原始类型: TIntObjectHashMap
        this.oldRootMap = new TIntObjectHashMap();
                              ^
  缺少泛型类TIntObjectHashMap<V>的类型参数
  其中, V是类型变量:
    V扩展已在类 TIntObjectHashMap中声明的Object
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/gumtree/ActionGenerator.java:30: 警告: [unchecked] 未经检查的转换
        this.oldRootMap = new TIntObjectHashMap();
                          ^
  需要: TIntObjectMap<ITree>
  找到:    TIntObjectHashMap
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/gumtree/ActionGenerator.java:35: 警告: [rawtypes] 找到原始类型: TIntObjectHashMap
        this.oldRootMapClone = new TIntObjectHashMap();
                                   ^
  缺少泛型类TIntObjectHashMap<V>的类型参数
  其中, V是类型变量:
    V扩展已在类 TIntObjectHashMap中声明的Object
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/gumtree/ActionGenerator.java:35: 警告: [unchecked] 未经检查的转换
        this.oldRootMapClone = new TIntObjectHashMap();
                               ^
  需要: TIntObjectMap<ITree>
  找到:    TIntObjectHashMap
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/gumtree/java/JdtTreeGenerator.java:20: 警告: [deprecation] AST中的JLS10已过时
    ASTParser parser = ASTParser.newParser(AST.JLS10);
                                              ^
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/gumtree/HeightIndexedPriorityList.java:15: 警告: [rawtypes] 找到原始类型: ArrayList
        array = (ArrayList<ITree>[])new ArrayList[listSize];
                                        ^
  缺少泛型类ArrayList<E>的类型参数
  其中, E是类型变量:
    E扩展已在类 ArrayList中声明的Object
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/util/ParseJava.java:14: 警告: [deprecation] AST中的JLS10已过时
    ASTParser parser = ASTParser.newParser(AST.JLS10);
                                              ^
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/fix/diamond/FixDiamond.java:38: 警告: [deprecation] AST中的JLS10已过时
    ASTParser parser = ASTParser.newParser(AST.JLS10);
                                              ^
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/fix/diamond/FixDiamond.java:41: 警告: [rawtypes] 找到原始类型: List
    List list = root.types();
    ^
  缺少泛型类List<E>的类型参数
  其中, E是类型变量:
    E扩展已在接口 List中声明的Object
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/fix/diamond/FixDiamond.java:70: 警告: [rawtypes] 找到原始类型: List
    List statements = methodDeclaration.getBody().statements();
    ^
  缺少泛型类List<E>的类型参数
  其中, E是类型变量:
    E扩展已在接口 List中声明的Object
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/fix/diamond/FixDiamond.java:89: 警告: [rawtypes] 找到原始类型: List
    List l = pt.typeArguments();
    ^
  缺少泛型类List<E>的类型参数
  其中, E是类型变量:
    E扩展已在接口 List中声明的Object
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/fix/applied/FixMethodMismatch.java:28: 警告: [deprecation] AST中的JLS10已过时
    ASTParser parser = ASTParser.newParser(AST.JLS10);
                                              ^
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/fix/applied/FixMethodMismatch.java:37: 警告: [rawtypes] 找到原始类型: List
    List list = methodInvocation.arguments();
    ^
  缺少泛型类List<E>的类型参数
  其中, E是类型变量:
    E扩展已在接口 List中声明的Object
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/fix/symbol/FixImport.java:42: 警告: [deprecation] AST中的JLS10已过时
    ASTParser parser = ASTParser.newParser(AST.JLS10);
                                              ^
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/fix/symbol/FixImport.java:45: 警告: [rawtypes] 找到原始类型: List
    List importList = compilationUnit.imports();
    ^
  缺少泛型类List<E>的类型参数
  其中, E是类型变量:
    E扩展已在接口 List中声明的Object
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/fix/supertype/DeleteOverride.java:33: 警告: [deprecation] AST中的JLS10已过时
    ASTParser parser = ASTParser.newParser(AST.JLS10);
                                              ^
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/fix/supertype/Inheritance.java:44: 警告: [deprecation] AST中的JLS10已过时
    ASTParser parser = ASTParser.newParser(AST.JLS10);
                                              ^
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/fix/supertype/Inheritance.java:51: 警告: [rawtypes] 找到原始类型: List
    List interfaceList = td.superInterfaceTypes();
    ^
  缺少泛型类List<E>的类型参数
  其中, E是类型变量:
    E扩展已在接口 List中声明的Object
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/fix/supertype/Inheritance.java:65: 警告: [unchecked] 未经检查的转换
    List<ImportDeclaration> importList = compilationUnit.imports();
                                                                ^
  需要: List<ImportDeclaration>
  找到:    List
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/fix/supertype/Inheritance.java:107: 警告: [deprecation] AST中的JLS10已过时
      ASTParser parser = ASTParser.newParser(AST.JLS10);
                                                ^
/Users/zhangchen/projects/autofix/src/main/java/fdse/zc/fix/abs/AddMethod.java:34: 警告: [deprecation] AST中的JLS10已过时
    ASTParser parser = ASTParser.newParser(AST.JLS10);
                                              ^
/Users/zhangchen/projects/autofix/src/main/java/Library.java:15: 警告: [rawtypes] 找到原始类型: List
      List l = list;
      ^
  缺少泛型类List<E>的类型参数
  其中, E是类型变量:
    E扩展已在接口 List中声明的Object
/Users/zhangchen/projects/autofix/src/main/java/Library.java:16: 警告: [unchecked] 未经检查的转换
      list = (List<String>)l;
                           ^
  需要: List<String>
  找到:    List
1 个错误
25 个警告
 FAILED

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':compileJava'.
> Compilation failed; see the compiler error output for details.

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.

* Get more help at https://help.gradle.org

BUILD FAILED in 0s
1 actionable task: 1 executed
bfgb
b
fb
f
bf
gb
f
bf
